from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

__requires__ = ['ansible', 'playbook-docgen', 'honger']
try:
    import pkg_resources
except Exception:
    pass

import os
import sys
import traceback

from ansible.errors import AnsibleError, AnsibleOptionsError, AnsibleParserError
from ansible.utils.display import Display
from ansible.utils.unicode import to_unicode
from playbook_docgen.c import PlaybookDocgenCLI


########################################
### OUTPUT OF LAST RESORT ###
class LastResort(object):
    def display(self, msg):
        print(msg, file=sys.stderr)

    def error(self, msg, wrap_text=None):
        print(msg, file=sys.stderr)


########################################

if __name__ == '__main__':

    display = LastResort()
    cli = None
    try:
        display = Display()
        display.debug("starting run")

        cli = PlaybookDocgenCLI(sys.argv)
        cli.parse()
        sys.exit(cli.run())
    except AnsibleOptionsError as e:
        cli.parser.print_help()
        display.error(to_unicode(e), wrap_text=False)
        sys.exit(5)
    except AnsibleParserError as e:
        display.error(to_unicode(e), wrap_text=False)
        sys.exit(4)
    except AnsibleError as e:
        display.error(to_unicode(e), wrap_text=False)
        sys.exit(1)
    except KeyboardInterrupt:
        display.error("User interrupted execution")
        sys.exit(99)
    except Exception as e:
        have_cli_options = cli is not None and cli.options is not None
        display.error("Unexpected Exception: %s" % to_unicode(e), wrap_text=False)
        if not have_cli_options or have_cli_options and cli.options.verbosity > 2:
            display.display(u"the full traceback was:\n\n%s" % to_unicode(traceback.format_exc()))
        else:
            display.display("to see the full traceback, use -vvv")
        sys.exit(250)
